user  nginx;	#设置nginx服务的系统使用用户
worker_processes  2;	#工作进程数（和cpu核心数保持一致）

error_log  /var/log/nginx/error.log warn;	#nginx的错误日志存放位置
pid        /var/run/nginx.pid;	#nginx服务启动时候pid

events {
    worker_connections  1024; #每个进程允许最大连接数
}

http {
    # 文件扩展名与类型映射表
    include       /etc/nginx/mime.types;

    # 默认文件类型
    default_type  application/octet-stream;

    # 设置日志模式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    # nginx访问日志存放位置
    access_log  /var/log/nginx/access.log  main;

    # 是否隐藏版本号 on不隐藏，off隐藏
    server_tokens on;

    # 开启高效传输模式
    sendfile on;

    # 减少网络报文段的数量
    #tcp_nopush on;

    # 提高I/O性能
    tcp_nodelay on;

    # 保持连接的时间，也叫超时时间
    keepalive_timeout 65;

    # 读取客户端请求头数据的超时时间 默认60秒
    client_header_timeout 15;

    # 读取客户端请求主体的超时时间 默认60秒
    client_body_timeout 15;

    # 响应客户端的超时时间 默认60秒
    send_timeout 25;

    # 上传文件大小50M 默认1m
    client_max_body_size 50m;

    # gzip压缩
    gzip on;

    # 只有docker镜像此功能，读取预先压缩的gz文件，这样可以减少每次请求进行gzip压缩的CPU资源消耗
    gzip_static on;

    # 开始压缩的最小长度(再小就不要压缩了,意义不在)
    gzip_min_length 1k;

    # 缓冲(压缩在内存中缓冲几块? 每块多大?)
    gzip_buffers 4 16k;

    # 开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)
    gzip_http_version 1.1;

    # 压缩级别([1-9]级别越高,压的越小,越浪费CPU计算资源)
    gzip_comp_level 4;

    # 对哪些类型的文件用压缩 如txt,xml,html ,css
    gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;

    # 是否传输gzip压缩标志
    gzip_vary on;

    # 设置请求者代理服务器,该如何缓存内容
    gzip_proxied  expired no-cache no-store private auth;

    #配置禁用gzip条件，支持正则。此处表示ie6及以下不启用gzip（因为ie低版本不支持）
    gzip_disable   "MSIE [1-6]\.";

    charset utf-8;

    # nginx根据ip限流
    limit_conn_zone $binary_remote_addr zone=ip:10m;
    limit_conn_zone $server_name zone=server:10m;

    server {
        listen 80; # 监听端口
        server_name www.pcdd.ltd pcdd.ltd; # 监听域名

        # pcdd.ltd强制跳转到www.pcdd.ltd
        if ($host != 'www.pcdd.ltd' ) {
            rewrite ^/(.*)$ http://www.domain.com/$1 permanent ;
        }

        location / {
            root /usr/share/nginx/html; #你打包项目存放的位置
            index index.html index.htm;
            try_files $uri $uri/ /index.html; #解决页面刷新404问题

            # 表示限制单个IP同时最多能持有的连接数
            limit_conn ip 2;
            # 表示虚拟主机(server)同时能处理并发连接的总数
            limit_conn server 200;
        }
    }

    # 禁止直接使用IP访问网站（同时解决未备案域名或恶意域名指向自己）
    server {
        listen 80 default_server;
        server_name  _;
        return 444;
    }

}
